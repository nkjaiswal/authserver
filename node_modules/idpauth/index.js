//---------- NODE AUTH MODULE START
var NodeRSA = require('node-rsa');
var publicKeyString = '-----BEGIN PUBLIC KEY-----\n'+
					'MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAMCgMCiHtdEurBp604bVgkoR8wgctNKr\n'+
					'qVNlQQaIGBZqSffMgTC1bH5rfE2V4Io+d74Jc7h+RzKDf5vlo4KH/icCAwEAAQ==\n'+
					'-----END PUBLIC KEY-----';
authenticate = function(req,res){
	if(!req.session.token){
		var currentUrl = req.protocol + '://' + req.get('host') + req.originalUrl;
		res.redirect('/?redirectUri=' + currentUrl);
	}
	return true;
}

validateToken = function(token){
	var publicKey = new NodeRSA(publicKeyString);
	var bSign = publicKey.verify(token.auth,new Buffer(token.signature, 'base64'))
	return bSign;
}

checkAppRolesAndPermission = function(req,app,role,permission){
	var bApp = false, bRole = false, bPermission = false;
	var token = req.session.token.auth;
	
	for(var i=0; i<token.app.length; i++){
		if(token.app[i].name == app){
			bApp = true;
			if(role == null){
				bRole = true;
			}else{
				for(var j=0; j<token.app[i].roles.length; j++){
					if(token.app[i].roles[j] == role){
						bRole = true;
						break;
					}
				}
			}

			if(permission == null){
				bPermission = true;
			}else{
				for(var j=0; j<token.app[i].permission.length; j++){
					if(token.app[i].permission[j] == permission){
						bPermission = true;
						break;
					}
				}
			}
			break;
		}
	}
	
	return bApp && bRole && bPermission;
}
exports.valid = function(req,res,app,role,permission){
	var v = authenticate(req,res) && 
		validateToken(req.session.token) && 
		checkAppRolesAndPermission(req,app,role,permission);
	if(!v){
		res.end("Sorry, you don't have permission to access this resource!!!")
	}
	return v;
}
//---------- NODE AUTH MODULE END